generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id            Int         @id
  name          String      @unique(map: "name") @db.VarChar(64)
  is_temp       Boolean?    @default(false)
  liquidity     Int?
  contra_of     Int?
  type          Int?
  Account       Account?    @relation("AccountToAccount", fields: [contra_of], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Account_ibfk_1")
  other_Account Account[]   @relation("AccountToAccount")
  EntryItem     EntryItem[]

  @@index([contra_of], map: "contra_of")
}

model AccountType {
  type Int    @id
  name String @db.VarChar(64)
}

model Entry {
  id           Int         @id
  owner_id     Int?
  date_entered DateTime    @db.Date
  User         User?       @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Entry_ibfk_1")
  EntryItem    EntryItem[]

  @@index([owner_id], map: "owner_id")
}

model EntryItem {
  entry_ref   Int
  account_ref Int
  item_type   Int?
  value       Int
  Entry       Entry   @relation(fields: [entry_ref], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "EntryItem_ibfk_1")
  Account     Account @relation(fields: [account_ref], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "EntryItem_ibfk_2")

  @@id([entry_ref, account_ref])
  @@index([account_ref], map: "account_ref")
}

model EntryItemType {
  type Int     @id
  name String? @db.VarChar(64)
}

model InvalidToken {
  token_id Int      @id
  exp      DateTime @db.Date
}

model User {
  id              Int     @id
  username        String  @unique(map: "username") @db.VarChar(64)
  email           String  @unique(map: "email") @db.VarChar(64)
  password_hashed String  @db.VarChar(64)
  salt            String? @db.VarChar(64)
  Entry           Entry[]
}
